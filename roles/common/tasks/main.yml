---
- block:
    ###########
    # Updates #
    ###########
    - name: "Updating packages"
      dnf:
        name: "*"
        state: "latest"

    - name: "Updating flatpaks"
      command:
        cmd: "flatpak update --noninteractive"
      register: "flatpak_update_results"
      changed_when: "'Nothing to do' not in flatpak_update_results.stdout"

    ################
    # Repositories #
    ################
    - name: "Installing distribution gpg key package"
      dnf:
        name: "distribution-gpg-keys"
        state: "latest"

    - name: "Importing free RPM Fusion repository gpg key"
      rpm_key:
        key: "/usr/share/distribution-gpg-keys/rpmfusion/RPM-GPG-KEY-rpmfusion-free-fedora-{{ansible_distribution_major_version}}"
        state: "present"

    - name: "Importing non-free RPM Fusion repository gpg key"
      rpm_key:
        key: "/usr/share/distribution-gpg-keys/rpmfusion/RPM-GPG-KEY-rpmfusion-nonfree-fedora-{{ansible_distribution_major_version}}"
        state: "present"

    - name: "Adding free RPM Fusion repository"
      dnf:
        name: "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ansible_distribution_major_version}}.noarch.rpm"
        state: "present"

    - name: "Adding non-free RPM Fusion repository"
      dnf:
        name: "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ansible_distribution_major_version}}.noarch.rpm"
        state: "present"

    - name: "Removing filtered fedora flathub remote"
      flatpak_remote:
        name: "fedora"
        state: "absent"

    - name: "Removing filtered fedora flathub testing remote"
      flatpak_remote:
        name: "fedora-testing"
        state: "absent"

    - name: "Adding unfiltered flathub remote"
      flatpak_remote:
        name: "flathub"
        state: "present"
        flatpakrepo_url: "https://flathub.org/repo/flathub.flatpakrepo"

    #######
    # SSH #
    #######
    - name: "Installing ssh client package"
      dnf:
        name: "openssh"
        state: "latest"

    - name: "Ensuring directory for ssh exists"
      file:
        path: "{{ [global_home, '.ssh'] | path_join }}"
        state: "directory"

    - name: "Configuring ssh"
      template:
        src: "{{ [playbook_dir, 'templates/ssh/config.j2'] | path_join }}"
        dest: "{{ [global_home, '.ssh/config'] | path_join }}"

    - name: "Ensuring directory for additional ssh confiugrations exists"
      file:
        path: "{{ [global_home, '.ssh/config.d'] | path_join }}"
        state: "directory"

    - name: "Importing ssh keys"
      copy:
        src: "{{ item }}"
        dest: "{{ [global_home, '.ssh/'] | path_join }}"
        owner: "{{ global_user }}"
        mode: 0600
      with_fileglob: "{{ [ssh_key_dir, '*key*'] | path_join }}"
      when:
        - is_ssh_key_imported is undefined
        - ssh_key_dir is defined
      register: ssh_key_dir_results

    - name: "Updating host_vars files"
      lineinfile:
        dest: "{{ [inventory_dir, 'host_vars/localhost'] | path_join }}"
        regexp: "is_ssh_key_imported:"
        line: "is_ssh_key_imported: True"
      when:
        - ssh_key_dir_results is not failed
        - ssh_key_dir_results is not skipped

    ##############
    # Multimedia #
    ##############
    - name: "Install multimedia codec packages"
      dnf:
        enablerepo: fedora-cisco-openh264
        name:
          - "gstreamer1-plugins-base"
          - "gstreamer1-plugins-good-*"
          - "gstreamer1-plugins-bad-*"
          - "gstreamer1-plugin-openh264"
          - "mozilla-openh264"
          - "gstreamer1-libav"
          - "lame*"
        exclude:
          - "gstreamer1-plugins-bad-free-devel"
          - "lame-devel"
        state: "latest"

    - name: "Installing vlc package"
      dnf:
        name: "vlc"
        state: "latest"

    ###############
    # Build tools #
    ###############
    - name: "Install the 'Development tools' package group"
      ansible.builtin.dnf:
        name: "@Development tools"
        state: "latest"

    - name: "Install the 'C Development Tools and Libraries' package group"
      ansible.builtin.dnf:
        name: "@C Development Tools and Libraries"
        state: "latest"

    ###############
    # Programming #
    ###############
    # Git
    - name: "Installing git package"
      dnf:
        name: "git"
        state: "latest"

    # Git
    - name: "Ensuring directory for git configuration exists"
      file:
        path: "{{ [global_home, '.config/git'] | path_join }}"
        state: "directory"

    # Git
    - name: "Configuring git"
      template:
        src: "{{ [playbook_dir, 'templates/git/config.j2'] | path_join }}"
        dest: "{{ [global_home, '.config/git/config'] | path_join }}"
      when:
        - git_username is defined
        - git_email is defined

    # Git
    - name: "Configuring ssh for git"
      template:
        src: "{{ [playbook_dir, 'templates/ssh/config.d/github.j2'] | path_join }}"
        dest: "{{ [global_home, '.ssh/config.d/github'] | path_join }}"
      when: git_key_name is defined

    # IDE
    - name: "Installing neovim package"
      dnf:
        name:
          - "neovim"
          - "ripgrep"
          - "fd-find"
        state: "latest"

    # IDE
    - name: "Configuring neovim"
      copy:
        src: "files/nvim"
        dest: "{{ [global_home, '.config/'] | path_join }}"
        owner: "{{ global_user }}"

    # Lua
    - name: "Installing lua packages"
      dnf:
        name:
          - "lua"
          - "luarocks"
        state: "latest"

    # Python
    - name: "Installing python packages"
      dnf:
        name:
          - "python3"
          - "python3-neovim"
          - "pip"
        state: "latest"

    # Java
    - name: "Installing java-17-openjdk-devel package"
      dnf:
        name: "java-17-openjdk-devel"
        state: "latest"

    # Nodejs
    - name: "Installing nodejs package"
      dnf:
        name: "nodejs"
        state: "latest"

    # Nodejs
    - name: Install neovim node.js package.
      community.general.npm:
        name: neovim
        global: true

    #    # Ruby
    #    - name: "Installing ruby package"
    #      dnf:
    #        name: "ruby-devel"
    #        state: "latest"
    #
    #    # Ruby
    #    - name: "Installing ruby neovim package"
    #      community.general.gem:
    #        name: "neovim"
    #        state: "latest"
    #        user_install: false

    #    # Go
    #    - name: "Installing golang package"
    #      dnf:
    #        name: "golang"
    #        state: "latest"

    #    # Rust
    #    - name: "Installing rust package"
    #      dnf:
    #        name:
    #         - "rust"
    #         - "cargo"
    #        state: "latest"

    #    # Julia
    #    - name: "Installing julia package"
    #      dnf:
    #        name: "julia"
    #        state: "latest"

    ###########
    # Writing #
    ###########
    - name: "Installing libreoffice packages"
      dnf:
        name:
          - "libreoffice-writer"
          - "libreoffice-calc"
          - "libreoffice-langpack-de"
          - "libreoffice-langpack-en"
        state: "latest"

    - name: "Installing obsidian flatpak"
      flatpak:
        name: "md.obsidian.Obsidian"
        state: "present"

    - name: "Configuring obsidian"
      git:
        repo: "git@github.com:Timon-Schwarz/pkm.git"
        dest: "{{ [global_home, 'Desktop/00_pkm'] | path_join }}"
        clone: true
        update: false
        accept_newhostkey: true
      become: false
      when:
        - is_owner is defined
        - is_owner

    #########
    # Fonts #
    #########
    - name: "Ensuring font directory exists"
      file:
        path: "{{ [global_home, '.fonts'] | path_join }}"
        state: "directory"

    - name: "Checking if Source Code Pro Nerd Font exists"
      stat:
        path: "{{ [global_home, '.fonts/SauceCodeProNerdFontMono-Regular.ttf'] | path_join }}"
      register: "nf_font_check"

    - name: "Installing Source Code Pro Nerd Font"
      when: not nf_font_check.stat.exists
      unarchive:
        src: "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.0/SourceCodePro.zip"
        dest: "{{ [global_home, '.fonts/'] | path_join }}"
        remote_src: "True"

    ##########
    # Shells #
    ##########
    - name: "Configuring bash"
      template:
        src: "{{ [playbook_dir, 'templates/bash/bashrc.j2'] | path_join }}"
        dest: "{{ [global_home, '.bashrc'] | path_join }}"

    - name: "Installing zsh package"
      dnf:
        name: "zsh"
        state: "latest"

    - name: "Ensuring directory for zsh configuration exists"
      file:
        path: "{{ [global_home, '.config/zsh'] | path_join }}"
        state: "directory"

    - name: "Configuring zsh"
      copy:
        src: "{{ item }}"
        dest: "{{ [global_home, '.config/zsh/'] | path_join }}"
      with_fileglob:
        - "{{ [playbook_dir, 'files/zsh/*'] | path_join }}"
        - "{{ [playbook_dir, 'files/zsh/.*'] | path_join }}"

    - name: "Installing powerline10k zsh plugin"
      git:
        repo: "https://github.com/romkatv/powerlevel10k.git"
        dest: "{{ [global_home, '.config/zsh/powerlevel10k'] | path_join }}"
        clone: True
        update: True
        depth: 1

    - name: "Installing syntax-highlighting zsh plugin"
      git:
        repo: "https://github.com/zsh-users/zsh-syntax-highlighting.git"
        dest: "{{ [global_home, '.config/zsh/zsh-syntax-highlighting'] | path_join }}"
        clone: True
        update: True

    - name: "Installing zsh-autosuggestions zsh plugin"
      git:
        repo: "https://github.com/zsh-users/zsh-autosuggestions"
        dest: "{{ [global_home, '.config/zsh/zsh-autosuggestions'] | path_join }}"
        clone: True
        update: True

    #############
    # Terminals #
    #############
    - name: "Installing alacritty package"
      dnf:
        name: "alacritty"
        state: "latest"

    - name: "Configuring alacritty"
      copy:
        src: "{{ item }}"
        dest: "{{ [global_home, '.config/alacritty/'] | path_join }}"
      with_fileglob: "{{ [playbook_dir, 'files/alacritty/*'] | path_join }}"

    #######################
    # Desktop environment #
    #######################
    - name: "Copying desktop wallpapers"
      copy:
        src: "{{ item }}"
        dest: "/usr/share/wallpapers/custom/"
      with_fileglob: "{{ [playbook_dir, 'files/wallpapers/*'] | path_join }}"

    ######################
    # KVM virtualization #
    ######################
    - name: "Installing 'virtualization' package group"
      dnf:
        name: "@virtualization"
        state: "latest"

    - name: "Ensuring that libvirtd is started and enabled"
      service:
        name: "libvirtd"
        state: "started"
        enabled: True

  rescue:
    - set_fact: task_failed = True
